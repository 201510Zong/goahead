/*
    main.bit -- Main Bit file for GoAhead

    This file contains the rules for targets to build and default settings for configuration
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
    ],

    settings: {
        product: 'goahead',
        title: 'Embedthis GoAhead',
        company: 'Embedthis',
        version: '3.0.0',
        buildNumber: '0',
        packs: [ 'bits/packs' ]

        /*
            Optional packs to search for when configuring
         */
        '+optional': [ 'doxygen', 'dsi', 'ejs', 'man', 'man2html', 'openssl', 'matrixssl', 'pmaker', 'ssl', 'utest', 'zip' ],

        /*
            Packs to disable when using --without all
         */
        'without-all': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl', 'openssl', 'ssl' ],
        'without-own': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl' ],

        /*
            Log for request access logging
         */
        accessLog: false,

        /*
            Automatically login. Useful for debugging.
         */
        autoLogin: false,

        /*
            Directory for use when validating client certificates
         */
        caPath: "",

        /*
            File of certificates 
         */
        caFile: "",

        /*
            Server certificate file for SSL
         */
        certificate: "server.crt",

        /*
            Build with CGI support and directory for CGI programs.
         */
        cgi: true,
        cgiBin: "cgi-bin",

        /*
            Directory containing web documents to serve
         */
        documents: "web",

        /*
            HTTP port to listen on
         */
        httpPort: 8080,

        /*  
            HTTP over IPv6 port to listen on
         */
        httpV6Port: 9090,

        /*
            Build with support for javascript web templates
         */
        javascript: true,

        /*
            Define legacy APIs for compatibility with old GoAhead web server applications
         */
        legacy: true,

        /*
            Sandbox limits and allocation sizes
         */
        limitBody:            8192,    /* Maximum POST|PUT body size */
        limitBuffer:          1024,    /* Default general buffer size */
        limitFilename:        256,     /* Maximum filename size */
        limitHeader:          2048,    /* Maximum HTTP single header size */
        limitHeaders:         4096,    /* Maximum HTTP header size */
        limitNumHeaders:        64,    /* Maximum number of headers */
        limitPassword:          32,    /* Maximum password size */
        limitResponseBuffer:  8192,    /* Maximum output buffer */
        limitSessionLife:     1800,    /* Session lifespan in secons */
        limitSessionCount:     120,    /* Maximum number of sessions to support */
        limitString:          4096,    /* Default string size */
        limitSocketBuffer:    4096,    /* Default socket buffer size */
        limitUri:             2048,    /* Maximum URI size */
        limitUpload:      20480000,    /* Maximum upload size */

        /*
            Server SSL key
         */
        key: "server.key.pem",

        /*
            Use PAM (Plugable Authentication Module) to store passwords
         */
        pam: false,

        /*
            Authentication realm
         */
        realm: "example.com",

        /*
            Replace malloc with a non-fragmenting allocator
         */
        replaceMalloc: false,

        /*
            SSL port to listen on
         */
        sslPort: 4443,

        /*
            Default location for debug log 
         */
        trace: "stdout:2",

        /*
            Enable the trace method. This should be disabled for security
         */
        traceMethod: false,

        /*
            Upload file support
         */
        upload: false,
        uploadDir: "/tmp",
    },

    targets: {
        /*
            Library
         */
        libgo: {
            type: 'lib',
            static: true,
            sources: [ '*.c' ],
            exclude: /goahead\.c/,
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Target for the goahead executable
         */
        goahead: {
            type: 'exe',
            rule: 'gui',
            sources: [ '*.c' ],
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Target for unit tests. Includes ASP and form callbacks
         */
        'goahead-test': {
            enable: bit.settings.profile != 'release',
            type: 'exe',
            sources: [ '*.c', 'test/test.c' ],
            exclude: /goahead\.c/,
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Compiler for web pages into C code
         */
        webcomp: {
            type: 'exe',
            depends: [ ],
            sources: [ 'utils/webcomp.c' ],
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
        },

        cgitest: {
            path: 'test/cgi-bin/cgitest${EXE}'
            type: 'exe',
            depends: [ ],
            sources: [ 'test/cgitest.c' ],
            headers: [ '*.h' ],
        },

        test: {
            action: "
                let ro = {noio: true, dir: 'test'}
                let depth = bit.settings.depth
                run('utest -v -i 2 --depth ' + depth, ro)
                if (depth >= 3) {
                    trace('Test', 'Light load tests')
                    run('utest -v -i 20 --depth ' + depth, ro)
                    for each (t in [2, 4]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 20 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                if (depth >= 4) {
                    trace('Test', 'Longevity load tests')
                    run('utest -v -i 100 --depth ' + depth, ro)
                    for each (t in [8, 16]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 100 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                trace('Test', 'Unit tests complete')
            ",
            platforms: [ 'local' ],
        },
        run: {
            action: "
                run('goahead -v', {noio: true})
            ",
        },
        package: {
            action: "/* TODO */",
        },
    },
})
