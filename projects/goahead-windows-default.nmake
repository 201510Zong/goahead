#
#   goahead-windows-default.nmake -- Makefile to build Embedthis GoAhead for windows
#

PRODUCT         = goahead
VERSION         = 3.1.0
BUILD_NUMBER    = 1
PROFILE         = default
PA              = $(PROCESSOR_ARCHITECTURE)

!IF "$(PA)" == "AMD64"
ARCH            = x64
ENTRY           = _DllMainCRTStartup
!ELSE
ARCH            = x86
ENTRY           = _DllMainCRTStartup@12
!ENDIF

OS              = windows
CONFIG          = $(OS)-$(ARCH)-$(PROFILE)
LBIN            = $(CONFIG)\bin
CC              = cl
LD              = link
RC              = rc
CFLAGS          = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS          = -D_REENTRANT -D_MT -DBIT_DEBUG
IFLAGS          = -I$(CONFIG)\inc
LDFLAGS         = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS        = -libpath:$(CONFIG)\bin
LIBS            = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

BIT_PACK_EST          = 1

BIT_ROOT_PREFIX       = C:
BIT_BASE_PREFIX       = $(BIT_ROOT_PREFIX)\Program Files
BIT_APP_PREFIX        = $(BIT_BASE_PREFIX)\Embedthis GoAhead
BIT_VAPP_PREFIX       = $(BIT_APP_PREFIX)
BIT_DATA_PREFIX       = $(BIT_VAPP_PREFIX)
BIT_STATE_PREFIX      = $(BIT_VAPP_PREFIX)
BIT_BIN_PREFIX        = $(BIT_VAPP_PREFIX)\bin
BIT_INC_PREFIX        = $(BIT_VAPP_PREFIX)\inc
BIT_LIB_PREFIX        = $(BIT_VAPP_PREFIX)\lib
BIT_MAN_PREFIX        = $(BIT_VAPP_PREFIX)\man
BIT_ETC_PREFIX        = $(BIT_VAPP_PREFIX)
BIT_WEB_PREFIX        = $(BIT_VAPP_PREFIX)\web
BIT_LOG_PREFIX        = $(BIT_VAPP_PREFIX)\log
BIT_SPOOL_PREFIX      = $(BIT_VAPP_PREFIX)\tmp
BIT_CACHE_PREFIX      = $(BIT_VAPP_PREFIX)\cache
BIT_SRC_PREFIX        = $(BIT_VAPP_PREFIX)\src


TARGETS     = $(TARGETS) $(CONFIG)\bin\removeFiles.exe
!IF "$(BIT_PACK_EST)" == "1"
TARGETS = $(TARGETS) $(CONFIG)\bin\libest.dll
!ENDIF
TARGETS     = $(TARGETS) $(CONFIG)\bin\ca.crt
TARGETS     = $(TARGETS) $(CONFIG)\bin\libgo.dll
TARGETS     = $(TARGETS) $(CONFIG)\bin\goahead.exe
TARGETS     = $(TARGETS) $(CONFIG)\bin\goahead-test.exe
TARGETS     = $(TARGETS) $(CONFIG)\bin\gopass.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(BIT_APP_PREFIX)" == ""
	echo "BIT_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\bit.h copy projects\goahead-windows-default-bit.h $(CONFIG)\inc\bit.h

clean:
	-if exist $(CONFIG)\bin\removeFiles.exe del /Q $(CONFIG)\bin\removeFiles.exe
	-if exist $(CONFIG)\bin\libest.dll del /Q $(CONFIG)\bin\libest.dll
	-if exist $(CONFIG)\bin\ca.crt del /Q $(CONFIG)\bin\ca.crt
	-if exist $(CONFIG)\bin\libgo.dll del /Q $(CONFIG)\bin\libgo.dll
	-if exist $(CONFIG)\bin\goahead.exe del /Q $(CONFIG)\bin\goahead.exe
	-if exist $(CONFIG)\bin\goahead-test.exe del /Q $(CONFIG)\bin\goahead-test.exe
	-if exist $(CONFIG)\bin\gopass.exe del /Q $(CONFIG)\bin\gopass.exe
	-if exist $(CONFIG)\obj\removeFiles.obj del /Q $(CONFIG)\obj\removeFiles.obj
	-if exist $(CONFIG)\obj\estLib.obj del /Q $(CONFIG)\obj\estLib.obj
	-if exist $(CONFIG)\obj\action.obj del /Q $(CONFIG)\obj\action.obj
	-if exist $(CONFIG)\obj\alloc.obj del /Q $(CONFIG)\obj\alloc.obj
	-if exist $(CONFIG)\obj\auth.obj del /Q $(CONFIG)\obj\auth.obj
	-if exist $(CONFIG)\obj\cgi.obj del /Q $(CONFIG)\obj\cgi.obj
	-if exist $(CONFIG)\obj\crypt.obj del /Q $(CONFIG)\obj\crypt.obj
	-if exist $(CONFIG)\obj\file.obj del /Q $(CONFIG)\obj\file.obj
	-if exist $(CONFIG)\obj\fs.obj del /Q $(CONFIG)\obj\fs.obj
	-if exist $(CONFIG)\obj\goahead.obj del /Q $(CONFIG)\obj\goahead.obj
	-if exist $(CONFIG)\obj\http.obj del /Q $(CONFIG)\obj\http.obj
	-if exist $(CONFIG)\obj\js.obj del /Q $(CONFIG)\obj\js.obj
	-if exist $(CONFIG)\obj\jst.obj del /Q $(CONFIG)\obj\jst.obj
	-if exist $(CONFIG)\obj\options.obj del /Q $(CONFIG)\obj\options.obj
	-if exist $(CONFIG)\obj\osdep.obj del /Q $(CONFIG)\obj\osdep.obj
	-if exist $(CONFIG)\obj\rom-documents.obj del /Q $(CONFIG)\obj\rom-documents.obj
	-if exist $(CONFIG)\obj\route.obj del /Q $(CONFIG)\obj\route.obj
	-if exist $(CONFIG)\obj\runtime.obj del /Q $(CONFIG)\obj\runtime.obj
	-if exist $(CONFIG)\obj\socket.obj del /Q $(CONFIG)\obj\socket.obj
	-if exist $(CONFIG)\obj\upload.obj del /Q $(CONFIG)\obj\upload.obj
	-if exist $(CONFIG)\obj\est.obj del /Q $(CONFIG)\obj\est.obj
	-if exist $(CONFIG)\obj\matrixssl.obj del /Q $(CONFIG)\obj\matrixssl.obj
	-if exist $(CONFIG)\obj\openssl.obj del /Q $(CONFIG)\obj\openssl.obj
	-if exist $(CONFIG)\obj\test.obj del /Q $(CONFIG)\obj\test.obj
	-if exist $(CONFIG)\obj\gopass.obj del /Q $(CONFIG)\obj\gopass.obj

#
#   bit.h
#
$(CONFIG)\inc\bit.h: $(DEPS_1)

#
#   removeFiles.obj
#
DEPS_2 = $(DEPS_2) $(CONFIG)\inc\bit.h

$(CONFIG)\obj\removeFiles.obj: \
    package\windows\removeFiles.c $(DEPS_2)
	@echo '   [Compile] package/windows/removeFiles.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\removeFiles.obj -Fd$(CONFIG)\obj\removeFiles.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) package\windows\removeFiles.c

#
#   removeFiles
#
DEPS_3 = $(DEPS_3) $(CONFIG)\obj\removeFiles.obj

$(CONFIG)\bin\removeFiles.exe: $(DEPS_3)
	@echo '      [Link] removeFiles'
	"$(LD)" -out:$(CONFIG)\bin\removeFiles.exe -entry:WinMainCRTStartup -subsystem:Windows $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\removeFiles.obj $(LIBS)

#
#   est.h
#
$(CONFIG)\inc\est.h: $(DEPS_4)
	@echo '      [File] windows-x86-default/inc/est.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\est\est.h" "$(CONFIG)\inc\est.h"

#
#   bitos.h
#
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\bit.h

$(CONFIG)\inc\bitos.h: $(DEPS_5)
	@echo '      [File] windows-x86-default/inc/bitos.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\bitos.h" "$(CONFIG)\inc\bitos.h"

#
#   estLib.obj
#
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\bit.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\est.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\estLib.obj: \
    src\deps\est\estLib.c $(DEPS_6)
	@echo '   [Compile] src/deps/est/estLib.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\estLib.obj -Fd$(CONFIG)\obj\estLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\est\estLib.c

!IF "$(BIT_PACK_EST)" == "1"
#
#   libest
#
DEPS_7 = $(DEPS_7) $(CONFIG)\inc\est.h
DEPS_7 = $(DEPS_7) $(CONFIG)\obj\estLib.obj

$(CONFIG)\bin\libest.dll: $(DEPS_7)
	@echo '      [Link] libest'
	"$(LD)" -dll -out:$(CONFIG)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\estLib.obj $(LIBS)
!ENDIF

#
#   ca-crt
#
DEPS_8 = $(DEPS_8) src\deps\est\ca.crt

$(CONFIG)\bin\ca.crt: $(DEPS_8)
	@echo '      [File] windows-x86-default/bin/ca.crt'
	if not exist "$(CONFIG)\bin" md "$(CONFIG)\bin"
	copy /Y "src\deps\est\ca.crt" "$(CONFIG)\bin\ca.crt"

#
#   goahead.h
#
$(CONFIG)\inc\goahead.h: $(DEPS_9)
	@echo '      [File] windows-x86-default/inc/goahead.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\goahead.h" "$(CONFIG)\inc\goahead.h"

#
#   js.h
#
$(CONFIG)\inc\js.h: $(DEPS_10)
	@echo '      [File] windows-x86-default/inc/js.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\js.h" "$(CONFIG)\inc\js.h"

#
#   action.obj
#
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\bit.h
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\goahead.h
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\action.obj: \
    src\action.c $(DEPS_11)
	@echo '   [Compile] src/action.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\action.obj -Fd$(CONFIG)\obj\action.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\action.c

#
#   alloc.obj
#
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\bit.h
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\alloc.obj: \
    src\alloc.c $(DEPS_12)
	@echo '   [Compile] src/alloc.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\alloc.obj -Fd$(CONFIG)\obj\alloc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\alloc.c

#
#   auth.obj
#
DEPS_13 = $(DEPS_13) $(CONFIG)\inc\bit.h
DEPS_13 = $(DEPS_13) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\auth.obj: \
    src\auth.c $(DEPS_13)
	@echo '   [Compile] src/auth.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\auth.obj -Fd$(CONFIG)\obj\auth.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\auth.c

#
#   cgi.obj
#
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\bit.h
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\cgi.obj: \
    src\cgi.c $(DEPS_14)
	@echo '   [Compile] src/cgi.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\cgi.obj -Fd$(CONFIG)\obj\cgi.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\cgi.c

#
#   crypt.obj
#
DEPS_15 = $(DEPS_15) $(CONFIG)\inc\bit.h
DEPS_15 = $(DEPS_15) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\crypt.obj: \
    src\crypt.c $(DEPS_15)
	@echo '   [Compile] src/crypt.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\crypt.obj -Fd$(CONFIG)\obj\crypt.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\crypt.c

#
#   file.obj
#
DEPS_16 = $(DEPS_16) $(CONFIG)\inc\bit.h
DEPS_16 = $(DEPS_16) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\file.obj: \
    src\file.c $(DEPS_16)
	@echo '   [Compile] src/file.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\file.obj -Fd$(CONFIG)\obj\file.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\file.c

#
#   fs.obj
#
DEPS_17 = $(DEPS_17) $(CONFIG)\inc\bit.h
DEPS_17 = $(DEPS_17) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\fs.obj: \
    src\fs.c $(DEPS_17)
	@echo '   [Compile] src/fs.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\fs.obj -Fd$(CONFIG)\obj\fs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\fs.c

#
#   goahead.obj
#
DEPS_18 = $(DEPS_18) $(CONFIG)\inc\bit.h
DEPS_18 = $(DEPS_18) $(CONFIG)\inc\goahead.h
DEPS_18 = $(DEPS_18) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\goahead.obj: \
    src\goahead.c $(DEPS_18)
	@echo '   [Compile] src/goahead.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\goahead.obj -Fd$(CONFIG)\obj\goahead.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\goahead.c

#
#   http.obj
#
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\bit.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\http.obj: \
    src\http.c $(DEPS_19)
	@echo '   [Compile] src/http.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\http.obj -Fd$(CONFIG)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\http.c

#
#   js.obj
#
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\bit.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\js.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\js.obj: \
    src\js.c $(DEPS_20)
	@echo '   [Compile] src/js.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\js.obj -Fd$(CONFIG)\obj\js.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\js.c

#
#   jst.obj
#
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\bit.h
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\goahead.h
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\js.h

$(CONFIG)\obj\jst.obj: \
    src\jst.c $(DEPS_21)
	@echo '   [Compile] src/jst.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\jst.obj -Fd$(CONFIG)\obj\jst.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\jst.c

#
#   options.obj
#
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\bit.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\options.obj: \
    src\options.c $(DEPS_22)
	@echo '   [Compile] src/options.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\options.obj -Fd$(CONFIG)\obj\options.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\options.c

#
#   osdep.obj
#
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\bit.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\osdep.obj: \
    src\osdep.c $(DEPS_23)
	@echo '   [Compile] src/osdep.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\osdep.obj -Fd$(CONFIG)\obj\osdep.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\osdep.c

#
#   rom-documents.obj
#
DEPS_24 = $(DEPS_24) $(CONFIG)\inc\bit.h
DEPS_24 = $(DEPS_24) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\rom-documents.obj: \
    src\rom-documents.c $(DEPS_24)
	@echo '   [Compile] src/rom-documents.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\rom-documents.obj -Fd$(CONFIG)\obj\rom-documents.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\rom-documents.c

#
#   route.obj
#
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\bit.h
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\route.obj: \
    src\route.c $(DEPS_25)
	@echo '   [Compile] src/route.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\route.obj -Fd$(CONFIG)\obj\route.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\route.c

#
#   runtime.obj
#
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\bit.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\runtime.obj: \
    src\runtime.c $(DEPS_26)
	@echo '   [Compile] src/runtime.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\runtime.obj -Fd$(CONFIG)\obj\runtime.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\runtime.c

#
#   socket.obj
#
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\bit.h
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\socket.obj: \
    src\socket.c $(DEPS_27)
	@echo '   [Compile] src/socket.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\socket.obj -Fd$(CONFIG)\obj\socket.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\socket.c

#
#   upload.obj
#
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\bit.h
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\upload.obj: \
    src\upload.c $(DEPS_28)
	@echo '   [Compile] src/upload.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\upload.obj -Fd$(CONFIG)\obj\upload.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\upload.c

#
#   est.h
#
src\deps\est\est.h: $(DEPS_29)

#
#   est.obj
#
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bit.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\goahead.h
DEPS_30 = $(DEPS_30) src\deps\est\est.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\est.obj: \
    src\ssl\est.c $(DEPS_30)
	@echo '   [Compile] src/ssl/est.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\est.obj -Fd$(CONFIG)\obj\est.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\ssl\est.c

#
#   matrixssl.obj
#
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\bit.h
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\matrixssl.obj: \
    src\ssl\matrixssl.c $(DEPS_31)
	@echo '   [Compile] src/ssl/matrixssl.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\matrixssl.obj -Fd$(CONFIG)\obj\matrixssl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\ssl\matrixssl.c

#
#   openssl.obj
#
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\bit.h
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\bitos.h
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\openssl.obj: \
    src\ssl\openssl.c $(DEPS_32)
	@echo '   [Compile] src/ssl/openssl.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\openssl.obj -Fd$(CONFIG)\obj\openssl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) -Isrc\deps\est src\ssl\openssl.c

#
#   libgo
#
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\bitos.h
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\goahead.h
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\js.h
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\action.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\alloc.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\auth.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\cgi.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\crypt.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\file.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\fs.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\goahead.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\http.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\js.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\jst.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\options.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\osdep.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\rom-documents.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\route.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\runtime.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\socket.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\upload.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\est.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\matrixssl.obj
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\openssl.obj

!IF "$(BIT_PACK_EST)" == "1"
LIBS_33 = $(LIBS_33) libest.lib
!ENDIF

$(CONFIG)\bin\libgo.dll: $(DEPS_33)
	@echo '      [Link] libgo'
	"$(LD)" -dll -out:$(CONFIG)\bin\libgo.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\action.obj $(CONFIG)\obj\alloc.obj $(CONFIG)\obj\auth.obj $(CONFIG)\obj\cgi.obj $(CONFIG)\obj\crypt.obj $(CONFIG)\obj\file.obj $(CONFIG)\obj\fs.obj $(CONFIG)\obj\goahead.obj $(CONFIG)\obj\http.obj $(CONFIG)\obj\js.obj $(CONFIG)\obj\jst.obj $(CONFIG)\obj\options.obj $(CONFIG)\obj\osdep.obj $(CONFIG)\obj\rom-documents.obj $(CONFIG)\obj\route.obj $(CONFIG)\obj\runtime.obj $(CONFIG)\obj\socket.obj $(CONFIG)\obj\upload.obj $(CONFIG)\obj\est.obj $(CONFIG)\obj\matrixssl.obj $(CONFIG)\obj\openssl.obj $(LIBS_33) $(LIBS_33) $(LIBS) libest.lib

#
#   goahead
#
DEPS_34 = $(DEPS_34) $(CONFIG)\bin\libgo.dll
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\bitos.h
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\goahead.h
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\js.h
DEPS_34 = $(DEPS_34) $(CONFIG)\obj\goahead.obj

LIBS_34 = $(LIBS_34) libgo.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_34 = $(LIBS_34) libest.lib
!ENDIF

$(CONFIG)\bin\goahead.exe: $(DEPS_34)
	@echo '      [Link] goahead'
	"$(LD)" -out:$(CONFIG)\bin\goahead.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\goahead.obj $(LIBS_34) $(LIBS_34) $(LIBS) libest.lib

#
#   test.obj
#
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\bit.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\goahead.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\js.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\test.obj: \
    test\test.c $(DEPS_35)
	@echo '   [Compile] test/test.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\test.obj -Fd$(CONFIG)\obj\test.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) test\test.c

#
#   goahead-test
#
DEPS_36 = $(DEPS_36) $(CONFIG)\bin\libgo.dll
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\bitos.h
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\goahead.h
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\js.h
DEPS_36 = $(DEPS_36) $(CONFIG)\obj\test.obj

LIBS_36 = $(LIBS_36) libgo.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_36 = $(LIBS_36) libest.lib
!ENDIF

$(CONFIG)\bin\goahead-test.exe: $(DEPS_36)
	@echo '      [Link] goahead-test'
	"$(LD)" -out:$(CONFIG)\bin\goahead-test.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\test.obj $(LIBS_36) $(LIBS_36) $(LIBS) libest.lib

#
#   gopass.obj
#
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\bit.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\goahead.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\gopass.obj: \
    src\utils\gopass.c $(DEPS_37)
	@echo '   [Compile] src/utils/gopass.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\gopass.obj -Fd$(CONFIG)\obj\gopass.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\utils\gopass.c

#
#   gopass
#
DEPS_38 = $(DEPS_38) $(CONFIG)\bin\libgo.dll
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\bitos.h
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\goahead.h
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\js.h
DEPS_38 = $(DEPS_38) $(CONFIG)\obj\gopass.obj

LIBS_38 = $(LIBS_38) libgo.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_38 = $(LIBS_38) libest.lib
!ENDIF

$(CONFIG)\bin\gopass.exe: $(DEPS_38)
	@echo '      [Link] gopass'
	"$(LD)" -out:$(CONFIG)\bin\gopass.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\gopass.obj $(LIBS_38) $(LIBS_38) $(LIBS) libest.lib

#
#   version
#
version: $(DEPS_39)
	@echo 3.1.0-1

#
#   stop
#
stop: $(DEPS_40)


#
#   installBinary
#
DEPS_41 = $(DEPS_41) stop

installBinary: $(DEPS_41)
	if not exist "C:/" md "C:/"
	if not exist "$(BIT_VAPP_PREFIX)" md "$(BIT_VAPP_PREFIX)"
	if not exist "$(BIT_VAPP_PREFIX)" md "$(BIT_VAPP_PREFIX)"
	if not exist "$(BIT_VAPP_PREFIX)\bin" md "$(BIT_VAPP_PREFIX)\bin"
	if not exist "$(BIT_VAPP_PREFIX)\man" md "$(BIT_VAPP_PREFIX)\man"
	if not exist "$(BIT_VAPP_PREFIX)" md "$(BIT_VAPP_PREFIX)"
	if not exist "$(BIT_VAPP_PREFIX)\web" md "$(BIT_VAPP_PREFIX)\web"
	if not exist "$(BIT_VAPP_PREFIX)\bin" md "$(BIT_VAPP_PREFIX)\bin"
	copy /Y "$(CONFIG)\bin\goahead.exe" "$(BIT_VAPP_PREFIX)\bin\goahead.exe"
	copy /Y "$(CONFIG)\bin\ca.crt" "$(BIT_VAPP_PREFIX)\bin\ca.crt"
	copy /Y "$(CONFIG)\bin\libest.dll" "$(BIT_VAPP_PREFIX)\bin\libest.dll"
	copy /Y "$(CONFIG)\bin\libgo.dll" "$(BIT_VAPP_PREFIX)\bin\libgo.dll"
	if not exist "$(BIT_VAPP_PREFIX)\web\web\bench" md "$(BIT_VAPP_PREFIX)\web\web\bench"
	copy /Y "src\web\bench\1b.html" "$(BIT_VAPP_PREFIX)\web\web\bench\1b.html"
	copy /Y "src\web\bench\4k.html" "$(BIT_VAPP_PREFIX)\web\web\bench\4k.html"
	copy /Y "src\web\bench\64k.html" "$(BIT_VAPP_PREFIX)\web\web\bench\64k.html"
	if not exist "$(BIT_VAPP_PREFIX)\web\web" md "$(BIT_VAPP_PREFIX)\web\web"
	copy /Y "src\web\index.html" "$(BIT_VAPP_PREFIX)\web\web\index.html"
	if not exist "$(BIT_VAPP_PREFIX)" md "$(BIT_VAPP_PREFIX)"
	copy /Y "src\auth.txt" "$(BIT_VAPP_PREFIX)\auth.txt"
	copy /Y "src\route.txt" "$(BIT_VAPP_PREFIX)\route.txt"

#
#   start
#
start: $(DEPS_42)


#
#   install
#
DEPS_43 = $(DEPS_43) stop
DEPS_43 = $(DEPS_43) installBinary
DEPS_43 = $(DEPS_43) start

install: $(DEPS_43)


#
#   uninstall
#
DEPS_44 = $(DEPS_44) stop

uninstall: $(DEPS_44)
	if exist "$(BIT_VAPP_PREFIX)" rd /Q /S"$(BIT_VAPP_PREFIX)"
	if exist "$(BIT_VAPP_PREFIX)\bin" rd /Q "$(BIT_VAPP_PREFIX)\bin"
	if exist "$(BIT_VAPP_PREFIX)\man" rd /Q "$(BIT_VAPP_PREFIX)\man"
	if exist "$(BIT_VAPP_PREFIX)" rd /Q "$(BIT_VAPP_PREFIX)"
	if exist "$(BIT_VAPP_PREFIX)\web" rd /Q "$(BIT_VAPP_PREFIX)\web"
	if exist "$(BIT_VAPP_PREFIX)\latest" rd /Q "$(BIT_VAPP_PREFIX)\latest"
	if exist "$(BIT_VAPP_PREFIX)" rd /Q "$(BIT_VAPP_PREFIX)"

