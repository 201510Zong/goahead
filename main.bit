/*
    main.bit -- Main Bit file for GoAhead

    This file contains the rules for targets to build and default settings for configuration.
    The Bit utility (http://ejscript.org) may be used to build GoAhead instead of make. Bit provides
    for configured builds and generates projects files.

    Alternatively, build using the "make" utility in which case this file is not used.
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
        "doc/doc.bit",
    ],

    '+modules': [
        'bits/goahead.es',
    ],

    settings: {
        product: 'goahead',
        title: 'Embedthis GoAhead',
        company: 'Embedthis',
        version: '3.0.0',
        buildNumber: '0',
        packs: [ 'bits/packs' ]

        /*
            Optional packs to search for when configuring
         */
        '+optional': [ 'doxygen', 'dsi', 'ejs', 'man', 'man2html', 'openssl', 'matrixssl', 'pmaker', 
            'ssl', 'utest', 'zip' ],

        /*
            Packs to disable when using --without all
         */
        'without-all': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl', 'openssl', 'ssl' ],
        'without-own': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl' ],

        /*
            Log for request access logging
         */
        accessLog: false,

        /*
            Automatically login. Useful for debugging.
         */
        autoLogin: false,

        /*
            Directory for use when validating client certificates for SSL
         */
        caPath: "",

        /*
            SSL file of certificates 
         */
        caFile: "",

        /*
            Server certificate file for SSL
         */
        certificate: "server.crt",

        /*
            Cipher suite to use with openssl
            AES128-SHA
         */
        ciphers: "HIGH:RC4+SHA",

        /*
            Build with CGI support and directory for CGI programs.
            The cgiBin is a unique path prefix for CGI URIs.
         */
        cgi: true,
        cgiBin: "cgi-bin",

        /*
            Directory containing web documents to serve
         */
        documents: "web",

        /*
            Enable X-Frame-Origin to prevent clickjacking. Set to empty to disable.
            Set to: DENY, SAMEORIGIN, ALLOW uri
         */
        xframeHeader: "SAMEORIGIN",

        /*
            Build with support for javascript web templates
         */
        javascript: true,

        /*
            Server SSL key
         */
        key: "server.key.pem",

        /*
            Define legacy APIs for compatibility with old GoAhead web server applications
         */
        legacy: false,

        /*
            Sandbox limits and allocation sizes
         */
        limitBuffer:          8192,    /* I/O Buffer size. Also chunk size. */
        limitFilename:         256,    /* Maximum filename size */
        limitHeader:          2048,    /* Maximum HTTP single header size */
        limitHeaders:         4096,    /* Maximum HTTP header size */
        limitNumHeaders:        64,    /* Maximum number of headers */
        limitPassword:          32,    /* Maximum password size */
        limitPost:           16384,    /* Maximum POST (and other method) incoming body size */
        limitPut:        204800000,    /* Maximum PUT body size ~ 200MB */
        limitSessionLife:     1800,    /* Session lifespan in seconds (30 mins) */
        limitSessionCount:     512,    /* Maximum number of sessions to support */
        limitString:          4096,    /* Default string size */
        limitTimeout:           60,    /* Request inactivity timeout in seconds */
        limitUri:             2048,    /* Maximum URI size */
        limitUpload:     204800000,    /* Maximum upload size ~ 200MB */

        /*
            Addresses to listen on. This specifies the protocol, interface and port.
         */
        listen: ["http://*:80", "https://*:443"]

        /*
            Use PAM (Plugable Authentication Module) to store passwords
         */
        pam: false,

        /*
            Temporary directory to hold PUT files
         */
        putDir: "/tmp",

        /*
            Authentication realm. Replace with your realm.
         */
        realm: "example.com",

        /*
            Replace malloc with a non-fragmenting allocator
         */
        replaceMalloc: false,

        /*
            Enable stealth options. Disable OPTIONS and TRACE methods.
         */
        stealth: true,

        /*
            Default location for debug log 
         */
        trace: "stderr:0",

        /*
            Upload file support
         */
        upload: true,
        uploadDir: "/tmp",
    },

    usage: {
        accessLog:          'Enable request access log (true|false)',
        assert:             'Enable program assertions (true|false)',
        caPath:             'Directory for client certificates (path)',
        caFile:             'File of client certificates (path)',
        certificate:        'Server certificate for SSL (path)',
        ciphers:            'SSL cipher suite (string)',
        cgi:                'Enable the CGI handler (true|false)',
        cgiBin:             'Directory CGI programs (path)',
        javascript:         'Enable the Javascript JST handler (true|false)',
        key:                'Server private key for SSL (path)',
        legacy:             'Enable the GoAhead 2.X legacy APIs (true|false)',

        limitBuffer:        'I/O Buffer size. Also chunk size.',
        limitFilename:      'Maximum filename size',
        limitHeader:        'Maximum HTTP single header size',
        limitHeaders:       'Maximum HTTP header size',
        limitNumHeaders:    'Maximum number of headers',
        limitPassword:      'Maximum password size',
        limitPost:          'Maximum POST (and other method) incoming body size',
        limitPut:           'Maximum PUT body size ~ 200MB',
        limitSessionLife:   'Session lifespan in seconds (30 mins)',
        limitSessionCount:  'Maximum number of sessions to support',
        limitString:        'Default string allocation size',
        limitTimeout:       'Request inactivity timeout in seconds',
        limitUri:           'Maximum URI size',
        limitUpload:        'Maximum upload size ~ 200MB',


        listen:             'Addresses to listen to (["http://IP:port", ...])',
        pam:                'Enable Unix Pluggable Auth Module (true|false)',
        putDir:             'Define the directory for file uploaded via HTTP PUT (path)',
        realm:              'Authentication realm (string)',

        replaceMalloc:      'Replace malloc with non-fragmenting allocator (true|false)',
        static:             'Build with static linking (true|false)',
        stealth:            'Run in stealth mode. Disable OPTIONS, TRACE (true|false)',
        trace:              'Default location and level for debug log (path:level)',
        tune:               'Optimize (size|speed|balanced)',
        upload:             'Enable file upload (true|false)',
        uploadDir:          'Define directory for uploaded files (path)',
    },

    targets: {
        /*
            Target for the goahead executable
         */
        libgo: {
            enable: true,
            type: 'lib',
            /* Xcode projects can't yet handle static builds */
            _static: 'true',
            sources: [ '*.c' ],
            headers: [ '*.h' ],
            exclude: /goahead\.c/,
            depends: [ 'openssl', 'matrixssl' ],
        },

        goahead: {
            type: 'exe',
            sources: [ 'goahead.c' ],
            headers: [ '*.h' ],
            depends: [ 'libgo', 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Target for unit tests. Includes ASP and form callbacks
         */
        'goahead-test': {
            enable: bit.settings.profile != 'release',
            type: 'exe',
            sources: [ 'test/test.c' ],
            headers: [ '*.h' ],
            depends: [ 'libgo', 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Compiler for web pages into C code
         */
        gopass: {
            type: 'exe',
            sources: [ 'utils/gopass.c' ],
            headers: [ '*.h' ],
            depends: [ 'libgo', 'openssl', 'matrixssl' ],
        },

        /*
            Compiler for web pages into C code
         */
        webcomp: {
            type: 'exe',
            sources: [ 'utils/webcomp.c' ],
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
        },

        cgitest: {
            path: 'test/cgi-bin/cgitest${EXE}'
            type: 'exe',
            sources: [ 'test/cgitest.c' ],
            headers: [ '*.h' ],
        },

        test: {
            action: "
                let ro = {noio: true, dir: 'test'}
                let depth = bit.settings.depth
                run('utest -v -i 2 --depth ' + depth, ro)
                if (depth >= 3) {
                    trace('Test', 'Light load tests')
                    run('utest -v -i 20 --depth ' + depth, ro)
                    for each (t in [2, 4]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 20 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                if (depth >= 4) {
                    trace('Test', 'Longevity load tests')
                    run('utest -v -i 100 --depth ' + depth, ro)
                    for each (t in [8, 16]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 100 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                trace('Test', 'Unit tests complete')
            ",
            platforms: [ 'local' ],
        },
        run: {
            action: "
                run('goahead -v', {noio: true})
            ",
        },
        package: {
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageSource', 'packageCombo'],
        },
        packageSource: {
            depends: ['build'],
            action: "packageSourceFiles()",
        },
        packageCombo: {
            depends: ['build'],
            action: "packageComboFiles()",
        },
    },
})
