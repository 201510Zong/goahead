/*
    main.bit -- Main Bit file for GoAhead

    This file contains the rules for targets to build and default settings for configuration.
    The Bit utility (http://ejscript.org) may be used to build GoAhead instead of make. Bit provides
    for configured builds and generates projects files.

    Alternatively, build using the "make" utility in which case this file is not used.
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
        "doc/doc.bit",
    ],

    '+modules': [
        'bits/goahead.es',
    ],

    settings: {
        product: 'goahead',
        title: 'Embedthis GoAhead',
        company: 'Embedthis',
        version: '3.0.0',
        buildNumber: '0',
        packs: [ 'bits/packs' ]

        /*
            Optional packs to search for when configuring
         */
        '+optional': [ 'doxygen', 'dsi', 'ejs', 'man', 'man2html', 'openssl', 'matrixssl', 'pmaker', 
            'ssl', 'utest', 'zip' ],

        /*
            Packs to disable when using --without all
         */
        'without-all': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl', 'openssl', 'ssl' ],
        'without-own': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl' ],

        /*
            Log for request access logging
         */
        accessLog: false,

        /*
            Automatically login. Useful for debugging.
         */
        autoLogin: false,

        /*
            Directory for use when validating client certificates for SSL
         */
        caPath: "",

        /*
            SSL file of certificates 
         */
        caFile: "",

        /*
            Server certificate file for SSL
         */
        certificate: "server.crt",

        /*
            Cipher suite to use with openssl
            AES128-SHA
         */
        ciphers: "HIGH:RC4+SHA",

        /*
            Build with CGI support and directory for CGI programs.
         */
        cgi: true,
        cgiBin: "cgi-bin",

        /*
            Directory containing web documents to serve
         */
        documents: "web",

        /*
            Addresses to listen on. This specifies the protocol, interface and port.
         */
        listen: ["http://*:80", "https://*:443"]

        /*
            Build with support for javascript web templates
         */
        javascript: true,

        /*
            Define legacy APIs for compatibility with old GoAhead web server applications
         */
        legacy: false,

        /*
            Sandbox limits and allocation sizes
         */
        limitBuffer:          8192,    /* I/O Buffer size. Also chunk size. */
        limitFilename:         256,    /* Maximum filename size */
        limitHeader:          2048,    /* Maximum HTTP single header size */
        limitHeaders:         4096,    /* Maximum HTTP header size */
        limitNumHeaders:        64,    /* Maximum number of headers */
        limitPassword:          32,    /* Maximum password size */
        limitRxBody:         16384,    /* Maximum receive body size for PUT|POST */
        limitSessionLife:     1800,    /* Session lifespan in seconds */
        limitSessionCount:     120,    /* Maximum number of sessions to support */
        limitString:          4096,    /* Default string size */
        limitTimeout:           60,    /* Request inactivity timeout in seconds */
        limitUri:             2048,    /* Maximum URI size */
        limitUpload:     204800000,    /* Maximum upload size ~ 200MB */

        /*
            Server SSL key
         */
        key: "server.key.pem",

        /*
            Use PAM (Plugable Authentication Module) to store passwords
         */
        pam: false,

        /*
            Authentication realm. Replace with your realm.
         */
        realm: "example.com",

        /*
            Replace malloc with a non-fragmenting allocator
         */
        replaceMalloc: false,

        /*
            Default location for debug log 
         */
        trace: "stderr:0",

        /*
            Enable the trace method. This should be disabled for security
         */
        traceMethod: false,

        /*
            Upload file support
         */
        upload: true,
        uploadDir: "/tmp",
    },

    targets: {
        /*
            Target for the goahead executable
         */
        libgo: {
            enable: true,
            type: 'lib',
            static: 'true',
            sources: [ '*.c' ],
            headers: [ '*.h' ],
            exclude: /goahead\.c/,
            depends: [ 'openssl', 'matrixssl' ],
        },

        goahead: {
            type: 'exe',
            sources: [ 'goahead.c' ],
            headers: [ '*.h' ],
            depends: [ 'libgo', 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Target for unit tests. Includes ASP and form callbacks
         */
        'goahead-test': {
            enable: bit.settings.profile != 'release',
            type: 'exe',
            sources: [ 'test/test.c' ],
            headers: [ '*.h' ],
            depends: [ 'libgo', 'openssl', 'matrixssl' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.pam) {
                        bit.target.libraries.push('pam')
                    }                                                                                      
                ",  
            },
        },

        /*
            Compiler for web pages into C code
         */
        gopass: {
            type: 'exe',
            sources: [ 'utils/gopass.c' ],
            headers: [ '*.h' ],
            depends: [ 'libgo', 'openssl', 'matrixssl' ],
        },

        /*
            Compiler for web pages into C code
         */
        webcomp: {
            type: 'exe',
            sources: [ 'utils/webcomp.c' ],
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
        },

        cgitest: {
            path: 'test/cgi-bin/cgitest${EXE}'
            type: 'exe',
            sources: [ 'test/cgitest.c' ],
            headers: [ '*.h' ],
        },

        test: {
            action: "
                let ro = {noio: true, dir: 'test'}
                let depth = bit.settings.depth
                run('utest -v -i 2 --depth ' + depth, ro)
                if (depth >= 3) {
                    trace('Test', 'Light load tests')
                    run('utest -v -i 20 --depth ' + depth, ro)
                    for each (t in [2, 4]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 20 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                if (depth >= 4) {
                    trace('Test', 'Longevity load tests')
                    run('utest -v -i 100 --depth ' + depth, ro)
                    for each (t in [8, 16]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 100 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                trace('Test', 'Unit tests complete')
            ",
            platforms: [ 'local' ],
        },
        run: {
            action: "
                run('goahead -v', {noio: true})
            ",
        },
        package: {
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageSource', 'packageCombo'],
        },
        packageSource: {
            depends: ['build'],
            action: "packageSourceFiles()",
        },
        packageCombo: {
            depends: ['build'],
            action: "packageComboFiles()",
        },
    },
})
