#
#   goahead-windows-default.nmake -- Makefile to build Embedthis GoAhead for windows
#

NAME                  = goahead
VERSION               = 3.3.1

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

LBIN                  = $(CONFIG)\bin

!IF "$(ME_EXT_EST)" == ""
ME_EXT_EST            = 1
!ENDIF
!IF "$(ME_EXT_SSL)" == ""
ME_EXT_SSL            = 1
!ENDIF

ME_EXT_COMPILER_PATH  = cl
ME_EXT_DOXYGEN_PATH   = doxygen
ME_EXT_DSI_PATH       = dsi
ME_EXT_EST_PATH       = src/paks/est/estLib.c
ME_EXT_LIB_PATH       = lib.exe
ME_EXT_LINK_PATH      = link
ME_EXT_MAN_PATH       = man
ME_EXT_MAN2HTML_PATH  = man2html
ME_EXT_MATRIXSSL_PATH = /usr/src/matrixssl
ME_EXT_NANOSSL_PATH   = /usr/src/nanossl
ME_EXT_OPENSSL_PATH   = /usr/src/openssl
ME_EXT_OSDEP_PATH     = src/paks/osdep
ME_EXT_PMAKER_PATH    = pmaker
ME_EXT_RC_PATH        = rc
ME_EXT_SSL_PATH       = ssl
ME_EXT_UTEST_PATH     = utest
ME_EXT_VXWORKS_PATH   = $(WIND_BASE)
ME_EXT_WINSDK_PATH    = winsdk
ME_EXT_ZIP_PATH       = zip

CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3  -MD
DFLAGS                = -D_REENTRANT -D_MT -DME_EXT_EST=$(ME_EXT_EST) -DME_EXT_SSL=$(ME_EXT_SSL) 
IFLAGS                = -I$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -machine:$(ARCH)
LIBPATHS              = "-libpath:$(CONFIG)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis GoAhead
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_EXT_EST)" == "1"
TARGETS               = $(TARGETS) $(CONFIG)\bin\libest.dll
!ENDIF
TARGETS               = $(TARGETS) $(CONFIG)\bin\ca.crt
TARGETS               = $(TARGETS) $(CONFIG)\bin\removeFiles.exe
TARGETS               = $(TARGETS) $(CONFIG)\bin\libgo.dll
TARGETS               = $(TARGETS) $(CONFIG)\bin\goahead.exe
TARGETS               = $(TARGETS) $(CONFIG)\bin\goahead-test.exe
TARGETS               = $(TARGETS) $(CONFIG)\bin\gopass.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\me.h copy projects\goahead-windows-default-me.h $(CONFIG)\inc\me.h

clean:
	if exist "$(CONFIG)\bin\libest.dll" del /Q "$(CONFIG)\bin\libest.dll"
	if exist "$(CONFIG)\bin\libest.lib" del /Q "$(CONFIG)\bin\libest.lib"
	if exist "$(CONFIG)\bin\libest.pdb" del /Q "$(CONFIG)\bin\libest.pdb"
	if exist "$(CONFIG)\bin\libest.exp" del /Q "$(CONFIG)\bin\libest.exp"
	if exist "$(CONFIG)\bin\ca.crt" del /Q "$(CONFIG)\bin\ca.crt"
	if exist "$(CONFIG)\bin\removeFiles.exe" del /Q "$(CONFIG)\bin\removeFiles.exe"
	if exist "$(CONFIG)\bin\removeFiles.lib" del /Q "$(CONFIG)\bin\removeFiles.lib"
	if exist "$(CONFIG)\bin\removeFiles.pdb" del /Q "$(CONFIG)\bin\removeFiles.pdb"
	if exist "$(CONFIG)\bin\removeFiles.exp" del /Q "$(CONFIG)\bin\removeFiles.exp"
	if exist "$(CONFIG)\bin\libgo.dll" del /Q "$(CONFIG)\bin\libgo.dll"
	if exist "$(CONFIG)\bin\libgo.lib" del /Q "$(CONFIG)\bin\libgo.lib"
	if exist "$(CONFIG)\bin\libgo.pdb" del /Q "$(CONFIG)\bin\libgo.pdb"
	if exist "$(CONFIG)\bin\libgo.exp" del /Q "$(CONFIG)\bin\libgo.exp"
	if exist "$(CONFIG)\bin\goahead.exe" del /Q "$(CONFIG)\bin\goahead.exe"
	if exist "$(CONFIG)\bin\goahead.lib" del /Q "$(CONFIG)\bin\goahead.lib"
	if exist "$(CONFIG)\bin\goahead.pdb" del /Q "$(CONFIG)\bin\goahead.pdb"
	if exist "$(CONFIG)\bin\goahead.exp" del /Q "$(CONFIG)\bin\goahead.exp"
	if exist "$(CONFIG)\bin\goahead-test.exe" del /Q "$(CONFIG)\bin\goahead-test.exe"
	if exist "$(CONFIG)\bin\goahead-test.lib" del /Q "$(CONFIG)\bin\goahead-test.lib"
	if exist "$(CONFIG)\bin\goahead-test.pdb" del /Q "$(CONFIG)\bin\goahead-test.pdb"
	if exist "$(CONFIG)\bin\goahead-test.exp" del /Q "$(CONFIG)\bin\goahead-test.exp"
	if exist "$(CONFIG)\bin\gopass.exe" del /Q "$(CONFIG)\bin\gopass.exe"
	if exist "$(CONFIG)\bin\gopass.lib" del /Q "$(CONFIG)\bin\gopass.lib"
	if exist "$(CONFIG)\bin\gopass.pdb" del /Q "$(CONFIG)\bin\gopass.pdb"
	if exist "$(CONFIG)\bin\gopass.exp" del /Q "$(CONFIG)\bin\gopass.exp"
	if exist "$(CONFIG)\obj\estLib.obj" del /Q "$(CONFIG)\obj\estLib.obj"
	if exist "$(CONFIG)\obj\removeFiles.obj" del /Q "$(CONFIG)\obj\removeFiles.obj"
	if exist "$(CONFIG)\obj\action.obj" del /Q "$(CONFIG)\obj\action.obj"
	if exist "$(CONFIG)\obj\alloc.obj" del /Q "$(CONFIG)\obj\alloc.obj"
	if exist "$(CONFIG)\obj\auth.obj" del /Q "$(CONFIG)\obj\auth.obj"
	if exist "$(CONFIG)\obj\cgi.obj" del /Q "$(CONFIG)\obj\cgi.obj"
	if exist "$(CONFIG)\obj\crypt.obj" del /Q "$(CONFIG)\obj\crypt.obj"
	if exist "$(CONFIG)\obj\file.obj" del /Q "$(CONFIG)\obj\file.obj"
	if exist "$(CONFIG)\obj\fs.obj" del /Q "$(CONFIG)\obj\fs.obj"
	if exist "$(CONFIG)\obj\http.obj" del /Q "$(CONFIG)\obj\http.obj"
	if exist "$(CONFIG)\obj\js.obj" del /Q "$(CONFIG)\obj\js.obj"
	if exist "$(CONFIG)\obj\jst.obj" del /Q "$(CONFIG)\obj\jst.obj"
	if exist "$(CONFIG)\obj\options.obj" del /Q "$(CONFIG)\obj\options.obj"
	if exist "$(CONFIG)\obj\osdep.obj" del /Q "$(CONFIG)\obj\osdep.obj"
	if exist "$(CONFIG)\obj\rom-documents.obj" del /Q "$(CONFIG)\obj\rom-documents.obj"
	if exist "$(CONFIG)\obj\route.obj" del /Q "$(CONFIG)\obj\route.obj"
	if exist "$(CONFIG)\obj\runtime.obj" del /Q "$(CONFIG)\obj\runtime.obj"
	if exist "$(CONFIG)\obj\socket.obj" del /Q "$(CONFIG)\obj\socket.obj"
	if exist "$(CONFIG)\obj\upload.obj" del /Q "$(CONFIG)\obj\upload.obj"
	if exist "$(CONFIG)\obj\est.obj" del /Q "$(CONFIG)\obj\est.obj"
	if exist "$(CONFIG)\obj\matrixssl.obj" del /Q "$(CONFIG)\obj\matrixssl.obj"
	if exist "$(CONFIG)\obj\nanossl.obj" del /Q "$(CONFIG)\obj\nanossl.obj"
	if exist "$(CONFIG)\obj\openssl.obj" del /Q "$(CONFIG)\obj\openssl.obj"
	if exist "$(CONFIG)\obj\goahead.obj" del /Q "$(CONFIG)\obj\goahead.obj"
	if exist "$(CONFIG)\obj\test.obj" del /Q "$(CONFIG)\obj\test.obj"
	if exist "$(CONFIG)\obj\gopass.obj" del /Q "$(CONFIG)\obj\gopass.obj"



#
#   version
#
version: $(DEPS_1)
	echo 3.3.1

#
#   est.h
#
$(CONFIG)\inc\est.h: $(DEPS_2)
	@echo '      [Copy] $(CONFIG)/inc/est.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\est\est.h $(CONFIG)\inc\est.h

#
#   me.h
#
$(CONFIG)\inc\me.h: $(DEPS_3)
	@echo '      [Copy] $(CONFIG)/inc/me.h'

#
#   osdep.h
#
DEPS_4 = $(DEPS_4) $(CONFIG)\inc\me.h

$(CONFIG)\inc\osdep.h: $(DEPS_4)
	@echo '      [Copy] $(CONFIG)/inc/osdep.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\osdep\osdep.h $(CONFIG)\inc\osdep.h

#
#   estLib.obj
#
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\me.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\est.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\estLib.obj: \
    src\paks\est\estLib.c $(DEPS_5)
	@echo '   [Compile] $(CONFIG)/obj/estLib.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\estLib.obj -Fd$(CONFIG)\obj\estLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\est\estLib.c

!IF "$(ME_EXT_EST)" == "1"
#
#   libest
#
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\est.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\me.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\osdep.h
DEPS_6 = $(DEPS_6) $(CONFIG)\obj\estLib.obj

$(CONFIG)\bin\libest.dll: $(DEPS_6)
	@echo '      [Link] $(CONFIG)/bin/libest.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\estLib.obj" $(LIBS) 
!ENDIF

#
#   ca-crt
#
DEPS_7 = $(DEPS_7) src\paks\est\ca.crt

$(CONFIG)\bin\ca.crt: $(DEPS_7)
	@echo '      [Copy] $(CONFIG)/bin/ca.crt'
	if not exist "$(CONFIG)\bin" md "$(CONFIG)\bin"
	copy /Y src\paks\est\ca.crt $(CONFIG)\bin\ca.crt

#
#   bit.h
#
$(CONFIG)\inc\bit.h: $(DEPS_8)
	@echo '      [Copy] $(CONFIG)/inc/bit.h'

#
#   removeFiles.obj
#
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\me.h
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\bit.h

$(CONFIG)\obj\removeFiles.obj: \
    package\windows\removeFiles.c $(DEPS_9)
	@echo '   [Compile] $(CONFIG)/obj/removeFiles.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\removeFiles.obj -Fd$(CONFIG)\obj\removeFiles.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) package\windows\removeFiles.c

#
#   removeFiles
#
DEPS_10 = $(DEPS_10) $(CONFIG)\inc\me.h
DEPS_10 = $(DEPS_10) $(CONFIG)\inc\bit.h
DEPS_10 = $(DEPS_10) $(CONFIG)\obj\removeFiles.obj

$(CONFIG)\bin\removeFiles.exe: $(DEPS_10)
	@echo '      [Link] $(CONFIG)/bin/removeFiles.exe'
	"$(LD)" -out:$(CONFIG)\bin\removeFiles.exe -entry:WinMainCRTStartup -subsystem:windows $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\removeFiles.obj" $(LIBS) 

#
#   bitos.h
#
$(CONFIG)\inc\bitos.h: $(DEPS_11)
	@echo '      [Copy] $(CONFIG)/inc/bitos.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\bitos.h $(CONFIG)\inc\bitos.h

#
#   goahead.h
#
$(CONFIG)\inc\goahead.h: $(DEPS_12)
	@echo '      [Copy] $(CONFIG)/inc/goahead.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\goahead.h $(CONFIG)\inc\goahead.h

#
#   js.h
#
$(CONFIG)\inc\js.h: $(DEPS_13)
	@echo '      [Copy] $(CONFIG)/inc/js.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\js.h $(CONFIG)\inc\js.h

#
#   action.obj
#
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\me.h
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\goahead.h
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\action.obj: \
    src\action.c $(DEPS_14)
	@echo '   [Compile] $(CONFIG)/obj/action.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\action.obj -Fd$(CONFIG)\obj\action.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\action.c

#
#   alloc.obj
#
DEPS_15 = $(DEPS_15) $(CONFIG)\inc\me.h
DEPS_15 = $(DEPS_15) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\alloc.obj: \
    src\alloc.c $(DEPS_15)
	@echo '   [Compile] $(CONFIG)/obj/alloc.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\alloc.obj -Fd$(CONFIG)\obj\alloc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\alloc.c

#
#   auth.obj
#
DEPS_16 = $(DEPS_16) $(CONFIG)\inc\me.h
DEPS_16 = $(DEPS_16) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\auth.obj: \
    src\auth.c $(DEPS_16)
	@echo '   [Compile] $(CONFIG)/obj/auth.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\auth.obj -Fd$(CONFIG)\obj\auth.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\auth.c

#
#   cgi.obj
#
DEPS_17 = $(DEPS_17) $(CONFIG)\inc\me.h
DEPS_17 = $(DEPS_17) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\cgi.obj: \
    src\cgi.c $(DEPS_17)
	@echo '   [Compile] $(CONFIG)/obj/cgi.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\cgi.obj -Fd$(CONFIG)\obj\cgi.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\cgi.c

#
#   crypt.obj
#
DEPS_18 = $(DEPS_18) $(CONFIG)\inc\me.h
DEPS_18 = $(DEPS_18) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\crypt.obj: \
    src\crypt.c $(DEPS_18)
	@echo '   [Compile] $(CONFIG)/obj/crypt.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\crypt.obj -Fd$(CONFIG)\obj\crypt.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\crypt.c

#
#   file.obj
#
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\me.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\file.obj: \
    src\file.c $(DEPS_19)
	@echo '   [Compile] $(CONFIG)/obj/file.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\file.obj -Fd$(CONFIG)\obj\file.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\file.c

#
#   fs.obj
#
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\me.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\fs.obj: \
    src\fs.c $(DEPS_20)
	@echo '   [Compile] $(CONFIG)/obj/fs.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\fs.obj -Fd$(CONFIG)\obj\fs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\fs.c

#
#   http.obj
#
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\me.h
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\http.obj: \
    src\http.c $(DEPS_21)
	@echo '   [Compile] $(CONFIG)/obj/http.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\http.obj -Fd$(CONFIG)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\http.c

#
#   js.obj
#
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\me.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\js.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\js.obj: \
    src\js.c $(DEPS_22)
	@echo '   [Compile] $(CONFIG)/obj/js.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\js.obj -Fd$(CONFIG)\obj\js.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\js.c

#
#   jst.obj
#
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\me.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\goahead.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\js.h

$(CONFIG)\obj\jst.obj: \
    src\jst.c $(DEPS_23)
	@echo '   [Compile] $(CONFIG)/obj/jst.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\jst.obj -Fd$(CONFIG)\obj\jst.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\jst.c

#
#   options.obj
#
DEPS_24 = $(DEPS_24) $(CONFIG)\inc\me.h
DEPS_24 = $(DEPS_24) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\options.obj: \
    src\options.c $(DEPS_24)
	@echo '   [Compile] $(CONFIG)/obj/options.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\options.obj -Fd$(CONFIG)\obj\options.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\options.c

#
#   osdep.obj
#
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\me.h
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\osdep.obj: \
    src\osdep.c $(DEPS_25)
	@echo '   [Compile] $(CONFIG)/obj/osdep.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\osdep.obj -Fd$(CONFIG)\obj\osdep.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\osdep.c

#
#   rom-documents.obj
#
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\me.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\rom-documents.obj: \
    src\rom-documents.c $(DEPS_26)
	@echo '   [Compile] $(CONFIG)/obj/rom-documents.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\rom-documents.obj -Fd$(CONFIG)\obj\rom-documents.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\rom-documents.c

#
#   route.obj
#
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\me.h
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\route.obj: \
    src\route.c $(DEPS_27)
	@echo '   [Compile] $(CONFIG)/obj/route.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\route.obj -Fd$(CONFIG)\obj\route.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\route.c

#
#   runtime.obj
#
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\me.h
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\runtime.obj: \
    src\runtime.c $(DEPS_28)
	@echo '   [Compile] $(CONFIG)/obj/runtime.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\runtime.obj -Fd$(CONFIG)\obj\runtime.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\runtime.c

#
#   socket.obj
#
DEPS_29 = $(DEPS_29) $(CONFIG)\inc\me.h
DEPS_29 = $(DEPS_29) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\socket.obj: \
    src\socket.c $(DEPS_29)
	@echo '   [Compile] $(CONFIG)/obj/socket.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\socket.obj -Fd$(CONFIG)\obj\socket.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\socket.c

#
#   upload.obj
#
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\me.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\upload.obj: \
    src\upload.c $(DEPS_30)
	@echo '   [Compile] $(CONFIG)/obj/upload.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\upload.obj -Fd$(CONFIG)\obj\upload.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\upload.c

#
#   est.obj
#
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\me.h
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\goahead.h
DEPS_31 = $(DEPS_31) $(CONFIG)\inc\est.h

$(CONFIG)\obj\est.obj: \
    src\ssl\est.c $(DEPS_31)
	@echo '   [Compile] $(CONFIG)/obj/est.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\est.obj -Fd$(CONFIG)\obj\est.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl\est.c

#
#   matrixssl.obj
#
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\me.h
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\matrixssl.obj: \
    src\ssl\matrixssl.c $(DEPS_32)
	@echo '   [Compile] $(CONFIG)/obj/matrixssl.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\matrixssl.obj -Fd$(CONFIG)\obj\matrixssl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl\matrixssl.c

#
#   nanossl.obj
#
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\me.h

$(CONFIG)\obj\nanossl.obj: \
    src\ssl\nanossl.c $(DEPS_33)
	@echo '   [Compile] $(CONFIG)/obj/nanossl.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\nanossl.obj -Fd$(CONFIG)\obj\nanossl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl\nanossl.c

#
#   openssl.obj
#
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\me.h
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\osdep.h
DEPS_34 = $(DEPS_34) $(CONFIG)\inc\goahead.h

$(CONFIG)\obj\openssl.obj: \
    src\ssl\openssl.c $(DEPS_34)
	@echo '   [Compile] $(CONFIG)/obj/openssl.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\openssl.obj -Fd$(CONFIG)\obj\openssl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ssl\openssl.c

#
#   libgo
#
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\est.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\me.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\osdep.h
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\estLib.obj
!IF "$(ME_EXT_EST)" == "1"
DEPS_35 = $(DEPS_35) $(CONFIG)\bin\libest.dll
!ENDIF
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\bitos.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\goahead.h
DEPS_35 = $(DEPS_35) $(CONFIG)\inc\js.h
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\action.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\alloc.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\auth.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\cgi.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\crypt.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\file.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\fs.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\http.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\js.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\jst.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\options.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\osdep.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\rom-documents.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\route.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\runtime.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\socket.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\upload.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\est.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\matrixssl.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\nanossl.obj
DEPS_35 = $(DEPS_35) $(CONFIG)\obj\openssl.obj

!IF "$(ME_EXT_EST)" == "1"
LIBS_35 = $(LIBS_35) libest.lib
!ENDIF

$(CONFIG)\bin\libgo.dll: $(DEPS_35)
	@echo '      [Link] $(CONFIG)/bin/libgo.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libgo.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\action.obj" "$(CONFIG)\obj\alloc.obj" "$(CONFIG)\obj\auth.obj" "$(CONFIG)\obj\cgi.obj" "$(CONFIG)\obj\crypt.obj" "$(CONFIG)\obj\file.obj" "$(CONFIG)\obj\fs.obj" "$(CONFIG)\obj\http.obj" "$(CONFIG)\obj\js.obj" "$(CONFIG)\obj\jst.obj" "$(CONFIG)\obj\options.obj" "$(CONFIG)\obj\osdep.obj" "$(CONFIG)\obj\rom-documents.obj" "$(CONFIG)\obj\route.obj" "$(CONFIG)\obj\runtime.obj" "$(CONFIG)\obj\socket.obj" "$(CONFIG)\obj\upload.obj" "$(CONFIG)\obj\est.obj" "$(CONFIG)\obj\matrixssl.obj" "$(CONFIG)\obj\nanossl.obj" "$(CONFIG)\obj\openssl.obj" $(LIBPATHS_35) $(LIBS_35) $(LIBS_35) $(LIBS) 

#
#   goahead.obj
#
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\me.h
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\goahead.h
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\goahead.obj: \
    src\goahead.c $(DEPS_36)
	@echo '   [Compile] $(CONFIG)/obj/goahead.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\goahead.obj -Fd$(CONFIG)\obj\goahead.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\goahead.c

#
#   goahead
#
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\est.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\me.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\osdep.h
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\estLib.obj
!IF "$(ME_EXT_EST)" == "1"
DEPS_37 = $(DEPS_37) $(CONFIG)\bin\libest.dll
!ENDIF
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\bitos.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\goahead.h
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\js.h
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\action.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\alloc.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\auth.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\cgi.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\crypt.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\file.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\fs.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\http.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\js.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\jst.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\options.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\osdep.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\rom-documents.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\route.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\runtime.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\socket.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\upload.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\est.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\matrixssl.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\nanossl.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\openssl.obj
DEPS_37 = $(DEPS_37) $(CONFIG)\bin\libgo.dll
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\goahead.obj

LIBS_37 = $(LIBS_37) libgo.lib
!IF "$(ME_EXT_EST)" == "1"
LIBS_37 = $(LIBS_37) libest.lib
!ENDIF

$(CONFIG)\bin\goahead.exe: $(DEPS_37)
	@echo '      [Link] $(CONFIG)/bin/goahead.exe'
	"$(LD)" -out:$(CONFIG)\bin\goahead.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\goahead.obj" $(LIBPATHS_37) $(LIBS_37) $(LIBS_37) $(LIBS) 

#
#   test.obj
#
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\me.h
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\goahead.h
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\js.h
DEPS_38 = $(DEPS_38) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\test.obj: \
    test\test.c $(DEPS_38)
	@echo '   [Compile] $(CONFIG)/obj/test.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\test.obj -Fd$(CONFIG)\obj\test.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) test\test.c

#
#   goahead-test
#
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\est.h
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\me.h
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\osdep.h
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\estLib.obj
!IF "$(ME_EXT_EST)" == "1"
DEPS_39 = $(DEPS_39) $(CONFIG)\bin\libest.dll
!ENDIF
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\bitos.h
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\goahead.h
DEPS_39 = $(DEPS_39) $(CONFIG)\inc\js.h
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\action.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\alloc.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\auth.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\cgi.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\crypt.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\file.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\fs.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\http.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\js.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\jst.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\options.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\osdep.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\rom-documents.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\route.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\runtime.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\socket.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\upload.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\est.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\matrixssl.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\nanossl.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\openssl.obj
DEPS_39 = $(DEPS_39) $(CONFIG)\bin\libgo.dll
DEPS_39 = $(DEPS_39) $(CONFIG)\obj\test.obj

LIBS_39 = $(LIBS_39) libgo.lib
!IF "$(ME_EXT_EST)" == "1"
LIBS_39 = $(LIBS_39) libest.lib
!ENDIF

$(CONFIG)\bin\goahead-test.exe: $(DEPS_39)
	@echo '      [Link] $(CONFIG)/bin/goahead-test.exe'
	"$(LD)" -out:$(CONFIG)\bin\goahead-test.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\test.obj" $(LIBPATHS_39) $(LIBS_39) $(LIBS_39) $(LIBS) 

#
#   gopass.obj
#
DEPS_40 = $(DEPS_40) $(CONFIG)\inc\me.h
DEPS_40 = $(DEPS_40) $(CONFIG)\inc\goahead.h
DEPS_40 = $(DEPS_40) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\gopass.obj: \
    src\utils\gopass.c $(DEPS_40)
	@echo '   [Compile] $(CONFIG)/obj/gopass.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\gopass.obj -Fd$(CONFIG)\obj\gopass.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\utils\gopass.c

#
#   gopass
#
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\est.h
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\me.h
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\osdep.h
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\estLib.obj
!IF "$(ME_EXT_EST)" == "1"
DEPS_41 = $(DEPS_41) $(CONFIG)\bin\libest.dll
!ENDIF
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\bitos.h
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\goahead.h
DEPS_41 = $(DEPS_41) $(CONFIG)\inc\js.h
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\action.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\alloc.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\auth.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\cgi.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\crypt.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\file.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\fs.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\http.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\js.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\jst.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\options.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\osdep.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\rom-documents.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\route.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\runtime.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\socket.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\upload.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\est.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\matrixssl.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\nanossl.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\openssl.obj
DEPS_41 = $(DEPS_41) $(CONFIG)\bin\libgo.dll
DEPS_41 = $(DEPS_41) $(CONFIG)\obj\gopass.obj

LIBS_41 = $(LIBS_41) libgo.lib
!IF "$(ME_EXT_EST)" == "1"
LIBS_41 = $(LIBS_41) libest.lib
!ENDIF

$(CONFIG)\bin\gopass.exe: $(DEPS_41)
	@echo '      [Link] $(CONFIG)/bin/gopass.exe'
	"$(LD)" -out:$(CONFIG)\bin\gopass.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\gopass.obj" $(LIBPATHS_41) $(LIBS_41) $(LIBS_41) $(LIBS) 

#
#   stop
#
stop: $(DEPS_42)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_43)
	cd .
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y $(CONFIG)\bin\goahead.exe "$(ME_VAPP_PREFIX)\bin\goahead.exe"
	copy /Y $(CONFIG)\bin\libgo.dll "$(ME_VAPP_PREFIX)\bin\libgo.dll"
	copy /Y $(CONFIG)\bin\libest.dll "$(ME_VAPP_PREFIX)\bin\libest.dll"
	copy /Y $(CONFIG)\bin\ca.crt "$(ME_VAPP_PREFIX)\bin\ca.crt"
	if not exist "$(ME_VAPP_PREFIX)\web" md "$(ME_VAPP_PREFIX)\web"
	copy /Y src\web\index.html "$(ME_VAPP_PREFIX)\web\index.html"
	copy /Y src\web\favicon.ico "$(ME_VAPP_PREFIX)\web\favicon.ico"
	if not exist "$(ME_VAPP_PREFIX)" md "$(ME_VAPP_PREFIX)"
	copy /Y src\auth.txt "$(ME_VAPP_PREFIX)\auth.txt"
	copy /Y src\route.txt "$(ME_VAPP_PREFIX)\route.txt"
	copy /Y src\self.crt "$(ME_VAPP_PREFIX)\self.crt"
	copy /Y src\self.key "$(ME_VAPP_PREFIX)\self.key"
	cd .

#
#   start
#
start: $(DEPS_44)
#  Omit build script start

#
#   install
#
DEPS_45 = $(DEPS_45) stop
DEPS_45 = $(DEPS_45) installBinary
DEPS_45 = $(DEPS_45) start

install: $(DEPS_45)
#  Omit build script install

#
#   uninstall
#
DEPS_46 = $(DEPS_46) stop

uninstall: $(DEPS_46)
	cd .
	if exist "$(ME_VAPP_PREFIX)\web" rd /Q /S "$(ME_VAPP_PREFIX)\web"
	if exist "$(ME_VAPP_PREFIX)" rd /Q /S "$(ME_VAPP_PREFIX)"
	if exist "$(ME_VAPP_PREFIX)\bin" rd /Q "$(ME_VAPP_PREFIX)\bin"
	if exist "$(ME_VAPP_PREFIX)\man" rd /Q "$(ME_VAPP_PREFIX)\man"
	if exist "$(ME_VAPP_PREFIX)" rd /Q "$(ME_VAPP_PREFIX)"
	if exist "$(ME_VAPP_PREFIX)\web" rd /Q "$(ME_VAPP_PREFIX)\web"
	if exist "$(ME_VAPP_PREFIX)\latest" del /Q "$(ME_VAPP_PREFIX)\latest"
	if exist "$(ME_VAPP_PREFIX)" rd /Q "$(ME_VAPP_PREFIX)"
	cd .

#
#   run
#
run: $(DEPS_47)
	cd src
	goahead -v
	cd ..
