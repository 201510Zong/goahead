/*
    main.bit -- Main Bit file for GoAhead

    This file contains the rules for targets to build and default settings for configuration
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
    ],

    settings: {
        product: 'goahead',
        title: 'Embedthis GoAhead',
        company: 'Embedthis',
        version: '3.0.0',
        buildNumber: '0',
        packs: [ 'bits/packs' ]

        /*
            Optional packs to search for when configuring
         */
        '+optional': [ 'doxygen', 'dsi', 'ejs', 'man', 'man2html', 'openssl', 'matrixssl', 'pmaker', 'ssl', 'utest', 'zip' ],

        /*
            Packs to disable when using --without all
         */
        _minimal: ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'ssl', 'matrixssl', 'openssl' ],
        minimal: ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'pmaker', 'matrixssl' ],

        /*
            Log for request access logging
         */
        accessLog: true,

        /*
            Directory for use when validating client certificates
         */
        caPath: "",

        /*
            File of certificates 
         */
        caFile: "",

        /*
            Server certificate file for SSL
         */
        certificate: "",

        /*
            Build with CGI support and directory for CGI programs.
         */
        cgi: true,
        cgiBin: "cgi-bin",

        /*
            Build with debug and error logging support
         */
        debugLog: true,

        /*
            Build with HTTP Digest Authentication support
            Replace the realm with a unique name for your authentication
         */
        digestAuth: true,
        digestRealm: "realm",

        /*
            Directory containing web documents to serve
         */
        documents: "web",

        /*
            HTTP port to listen on
         */
        httpPort: 8080,

        /*
            Build with support for javascript web templates
         */
        javascript: true,

        /*
            Build with for Http Keep-Alive support
         */
        keepAlive: true,

        /*
            Build with Http If-Modified header support
         */
        ifModified: true,

        /*
            Define legacy APIs for compatibility with old GoAhead web server applications
         */
        legacy: false,

        /*
            Sandbox limits and allocation sizes
         */
        limitBuffer:        1024,   /* Default general buffer size */
        limitFilename:      256,    /* Maximum filename size */
        limitString:        4096,   /* Default string size */
        limitSocketBuffer:  512,    /* Default socket buffer size */
        limitHeader:        2048,   /* Maximum HTTP single header size */
        limitHeaders:       8192,   /* Maximum HTTP header size */
        limitUrl:           2048,   /* Maximum URL size */
        limitPassword:      32,     /* Maximum password size*/

        /*
            Server SSL key
         */
        key: "",

        /*
            Server authentication password (decoded)
         */
        password: "",

        /*
            Replace malloc with a non-fragmenting allocator
         */
        replaceMalloc: false,

        /*
            SSL port to listen on
         */
        sslPort: 4443,

        /*
            Default location for debug log 
         */
        trace: "stdout:2",

        /*
            Build with user management support
         */
        accessManagement: false,
        userManagement: false,
        userManagementGui: false,
    },

    targets: {
        /*
            Target for the goahead web server executable
         */
        goahead: {
            type: 'exe',
            rule: 'gui',
            depends: [ ],
            sources: [ '*.c' ],
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
            _resources: [ 'goahead.rc' ],
        },

        'goahead-test': {
            enable: bit.settings.profile != 'release',
            type: 'exe',
            depends: [ ],
            sources: [ '*.c', 'test/test.c' ],
            headers: [ '*.h' ],
            exclude: /goahead\.c/,
            depends: [ 'openssl', 'matrixssl' ],
        },

        /*
            Compiler for web pages into C code
         */
        webcomp: {
            type: 'exe',
            depends: [ ],
            sources: [ 'utils/webcomp.c' ],
            headers: [ '*.h' ],
            depends: [ 'openssl', 'matrixssl' ],
        },

        cgitest: {
            path: 'test/cgi-bin/cgitest${EXE}'
            type: 'exe',
            depends: [ ],
            sources: [ 'test/cgitest.c' ],
            headers: [ '*.h' ],
        },

        test: {
            action: "
                let ro = {noio: true, dir: 'test'}
                let depth = bit.settings.depth
                run('utest -v -i 2 --depth ' + depth, ro)
                if (depth >= 3) {
                    trace('Test', 'Light load tests')
                    run('utest -v -i 20 --depth ' + depth, ro)
                    for each (t in [2, 4]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 20 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                if (depth >= 4) {
                    trace('Test', 'Longevity load tests')
                    run('utest -v -i 100 --depth ' + depth, ro)
                    for each (t in [8, 16]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 100 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                trace('Test', 'Unit tests complete')
            ",
            platforms: [ 'local' ],
        },
        run: {
            action: "
                run('goahead -v', {noio: true})
            ",
        },
        package: {
            action: "/* TODO */",
        },
    },
})
